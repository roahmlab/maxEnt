\documentclass{article}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{verbatim}
\usepackage{listings}
\lstset{frame=single,language=Matlab}
\newcommand{\RR}{\mathbb{R}}
\title{Robust Identification Error Tools (Alpha)}
\author{Mark M. Tobenkin}
\begin{document}
\begin{abstract}
  The following presents a subset of the {\tt spot/nlid} nonlinear identification utilities.  The vast majority of SPOT is the product of Alexandre Megretski.
  These tools leverage SPOT and semidefinite solvers to optimize models based on Robust Identification Error, as explained in \cite{Tob10}.
\end{abstract}
\section{Introduction}
The RIE toolkit optimizes models of the form:
\begin{align}
  e(x(t+1)) = & f(x(t),u(t)) \\
  y(t) =& g(x(t),u(t))
\end{align}
in Discrete Time (DT) and:
\begin{align}
  \frac{d}{dt}e(x(t)) = & f(x(t),u(t)) \\
  y(t) =& g(x(t),u(t))
\end{align}
in Continuous Time (CT).   Here, $x(t) \in \RR^n$ is the system state, $y(t) \in \RR^k$ is the system output and $u(t) \in \RR^m$ is the system input.
We will use $v(t) \in \RR^n$ to denote:
\begin{align}
  v(t) = &\: x(t+1) & (\textrm{DT})\nonumber\\
  v(t) =&\: \dot x(t) & (\textrm{CT})\nonumber
\end{align}

\subsection{Quick Start}
One function provides an immediate interface to producing RIE optimized fits:
\begin{lstlisting}
  [model,P,r,info] = nlid_vxuy2efg(data,domain,stable,...
                              fmonom,emonom,gmonom,local);
\end{lstlisting}
The following is a detailed explanation of the inputs and outputs of this function.
\subsubsection{Inputs:}
\begin{description}
\item[{\tt data}]
  The toolkit generally works with sampled data matricies.  If $s(t) \in \RR^p$, then we have a data-matrix:
  $$S = \begin{bmatrix} s(t_1) & \ldots & s(t_N) \end{bmatrix} \in \RR^{p \times N}$$
  Our fitting procedure generally deals with four data matricies, $(V,X,U,Y)$ derived from $v(t),x(t),u(t),y(t)$.   These matricies are bundled into a {\tt data} struct with {\tt data.V,data.X,data.U,data.Y} holding each matrix.
\item[{\tt domain}] A character string, either {\tt 'CT'} or {\tt 'DT'}.
\item[{\tt stable}] A flag, {\tt stable = 1}, indicating if incremental stability should be imposed on the model, that is given two initial conditions $x_1(0) = x_1$ and $x_2(0) = x_2$, and a single output $u_1(t) = u_2(t) = u(t)$, the states converge $\lim_{t\rightarrow \infty} |x_1(t)-x_2(t)| = 0$.  This is currently supported for DT fits only.  The default is {\tt stable = 0}.
\item[{\tt fmonom,emonom,gmonom}] Functions returning monomials for each function $(e,f,g)$, e.g.:
  \begin{lstlisting}
    gmonom = @(x,u) mpmonomials({x,u},{0:3,0:3});
    fmonom = @(x,u) mpmonomials({x,u},{0:4,0:1});
    emonom = @(x) monomials(x,1:5);
  \end{lstlisting}
\item[{\tt local}] A flag, {\tt local = 1} indicating the local RIE should be used.  The default is {\tt local = 1}.
\end{description}
\subsubsection{Outputs:}
\begin{description}
\item[{\tt model}] A structure containing the resulting model.  The fields of the structure are:
  \begin{description}
  \item[domain] The domain of the model ({\tt 'CT'} or {\tt 'DT'}).
  \item[v,x,u,y] Simple {\tt msspoly} objects representing the update, state, input and output.
  \item[e,f,g] The model, after an affine change of coordinates, represented by {\tt msspoly} objects.
  \item[affine] The affine change of coordinates.
  \end{description}
\item[{\tt P}] A positive definite matrix involved in the storage function (see \cite{Tob10}).
\item[{\tt r}] Upper bounds on the RIE for each data-point.
\item[{\tt info}] Diagnostic information form the solver.
\end{description}


% \section{Data Preparation}
% \label{data}
% Identifying candidate states, and normalizing data are essential steps for using this toolbox and improving the quality of fits.  More documentation and utilities to come.

% The toolkit generally works with sampled data matricies.  If $s(t) \in \RR^p$, then we have a data-matrix:
% $$S = \begin{bmatrix} s(t_1) & \ldots & s(t_N) \end{bmatrix} \in \RR^{p \times N}$$
% % When dealing with polynomial functions, centering and scaling the data can lead to much improved numerical conditioning.  The following utility operates on a data matrix:
% % \begin{lstlisting}
% % [S,af] = data_normalize_matrix(S0);
% % \end{lstlisting}
% % Here {\tt S} is a normalized version of {\tt S0}.
% Our fitting procedure generally deals with four data matricies, $(V,X,U,Y)$ derived from $v(t),x(t),u(t),y(t)$.   These matricies are bundled into a {\tt data} struct with {\tt data.V,data.X,data.U,data.Y} holding each matrix.
% Care must be taken when choosing coordinates transforms for $v$ and $x$, so we normalize the full set of matricies using:
% \begin{lstlisting}
% domain = 'CT'; % or 'DT'
% [data,affine] = sim_data_normalize(data0,domain);
% \end{lstlisting}
% Here {\tt data} contains scaled data matricies derived from {\tt data0}.  The domain, The variable {\tt affine} has components {\tt affine.V,\ldots,affine.Y}.  Each such entry is a struct with entries {\tt mu} and {\tt T}.
% For example {\tt data0.X} can be recovered by {\tt affine.X.T*data.X + repmat(affine.X.mu,1,N)}.


                        

% \section{Optimizing a Fit}
% The functions are design for two cases, depending on whether $g(\cdot,\cdot)$ is known {\it a priori}.
% The overall process will consist of:
% \begin{enumerate}
%   \item Choose the model structure.
%   \item Constrain the model.
%   \item Design objectives.
%   \item Optimize a scalar objective.
%   \item Simulate the model.
% \end{enumerate}

% \subsection{Choose the Model Structure}
% To identify a model, first create an {\tt mssprog}:
% \begin{lstlisting}
% prog = mssprog;
% \end{lstlisting}
% Now, we generate a model, which consists of a set of {\tt msspoly} objects representing the functions of the model, with coefficients as free variables in the program.  We will document the case when $g$ is unknown and return to the case where it is known in later.
% \begin{lstlisting}
% n = 4; k = 2; m = 2;   % Model Dimensions
% domain = 'CT';  % or 'DT'
% emonom = @(x) monomials(x,0:4);
% fmonom = @(x,u) mpmonomials({x,u},{0:4,0:1});
% gmonom = @(x,u) mpmonomials({x,u},{0:4,0:1});
% [prog,model] = nlid_vxuy2efg_model(prog,n,m,k,domain,...
%                         emonom,fmonom,gmonom,affine);
% \end{lstlisting}
% This will create a model where $f$ and $g$ are affine and $u$ and polynomials of total degree 4 in $x$.  Here, $n,m,k$ specify the dimensions of the model.
% Here the commands {\tt monomials} and {\tt mpmonomials} generate columns of basis monomials.

% The variable {\tt affine} is an optional argument specifying an affine change of coordinates which exists before data enters $e,f,g$.

% \subsection{Constrain the Model}
% To get a meaningful fit, the model must be have at least one of the following constraint placed on it.  {\bf Choose one.} Well-posedness is a consequence of the stability constraint, so it is redundant to try to enforce both.
% \subsubsection{Stable}
% \begin{lstlisting}
% [prog,P] = new(prog,n,'psd');
% [prog] = nlid_vxuy2ef_stable(prog,model,P);
% \end{lstlisting}
% The first line generates a positive semi-definite matrix used in a storage function.  The second line requires incremental stability of the system, that is, given two initial conditions $x_1(0) = x_1$ and $x_2(0) = x_2$, and a single output $u_1(t) = u_2(t) = u(t)$, the states converge $\lim_{t\rightarrow \infty} |x_1(t)-x_2(t)| = 0$.  This is currently supported for DT fits only.
% \subsubsection{Well-Posed}
% If one does not require global stability, you must require the system to be well-posed. 
% \begin{lstlisting}
% [prog] = nlid_vxuy2ef_wellposed(prog,model)
% \end{lstlisting}
% This ensures that $\frac{\partial}{\partial_x} e(x)  + \frac{\partial}{\partial_x} e(x)' \geq 2 I$.  For both DT and CT models a constraint of this form ensures one can solve for $v$.

% \subsection{Choosing Objectives}
% \subsubsection{RIE}
% The primary objective function this toolkit provides can be computed by:
% \begin{lstlisting}
% [prog,r,P] = nlid_vxuy2efg_rie_obj(prog,model,P,data,loc)
% \end{lstlisting}
% Here $P$ is a positive semi-definite matrix which is $n \times n$.  It can be the same {\tt P} used in the stability constraint, an independent p.s.d. matrix or {\tt []}, in which case it will be generated automatically.
% The {\tt data} is prepared as noted in Section~\ref{data}.

% \subsubsection{Other Objectives}
% Shortly we will provide functions for optimizing equation error, and filtered equation error as well.
% \subsection{Optimizing}
% We now optimize the actual model.
% \begin{lstlisting}
% [prog,info] = sedumi(prog,sum(r),0);
% \end{lstlisting}
% Here, we optimize the sume of the {\tt r} vector, but weighting schemes are admissible.  Here we can also use a scalarized trade-off between equations error and RIE or other metrics.
\subsection{Simulate the Model}
Having identified the model, we now simulate the system.
\begin{lstlisting}
[ts,yfit,xfit] = sim_efg_model(model,ut,tspan,x0);
\end{lstlisting}
The argument {\tt tspan} should be a monotonically increasing row-vector.  For the DT domain, the step sizes should be identical.
If the model is in the CT domain, {\tt ut} should be a function of time, otherwise, {\tt ut} should be an $m\times N$ data matrix where $N$ is the length of the row vector {\tt tspan}.
\end{document}
